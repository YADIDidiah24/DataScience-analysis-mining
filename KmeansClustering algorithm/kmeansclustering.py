# -*- coding: utf-8 -*-
"""KmeansClustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NXZLduqbsNnT6u8tbq-w0VSmtye3bYaN
"""

import pandas as pd
import numpy as np

"""# New Section"""

path ="/content/drive/MyDrive/Colab Notebooks/players_fifa23.csv"

players = pd.read_csv(path)

players

features = ["Overall","Potential","WageEUR","ValueEUR","Age"]

players = players.dropna(subset=features)

data = players[features].copy()

data = ((data-data.min())/(data.max()-data.min()))*9+1

data.describe()

data.head()

def randomCentroids(data,k):
    centroids = []
    for i in range(k):
        centroid = data.apply(lambda x: float(x.sample()))
        centroids.append(centroid)
    return pd.concat(centroids, axis=1)

centroids = randomCentroids(data,5)

def get_labels(data,centroids):
    distances = centroids.apply(lambda x: np.sqrt(((data-x)**2).sum(axis=1)))
    return distances.idxmin(axis=1)

labels = get_labels(data,centroids)

labels.value_counts()

def newCentroids(data,labels,k):
    return data.groupby(labels).apply(lambda x: np.exp(np.log(x).mean())).T

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from IPython.display import clear_output

def plotCluster(data,labels,centroids, iteration):
  pca = PCA(n_components=2)
  data_2d = pca.fit_transform(data)
  centroids_2d = pca.transform(centroids.T)
  clear_output(wait=True)
  plt.title(f"iteration {iteration}")
  plt.xlabel('x')
  plt.ylabel('y')
  plt.scatter(x=data_2d[:,0],y=data_2d[:,1], c=labels)
  plt.scatter(x=centroids_2d[:,0],y=centroids_2d[:,1])
  plt.show()

max_iter =100
k = 3
centroids = randomCentroids(data,k)
old_centroids = pd.DataFrame()
iteration = 1
while iteration <max_iter and not centroids.equals(old_centroids):
      old_centroids = centroids
      labels = get_labels(data,centroids)
      centroids = newCentroids(data,labels,k)
      plotCluster(data,labels,centroids,iteration)
      iteration+=1

players[labels==4][["Name"]+features].head(20)

from sklearn.cluster import KMeans

kmeans = KMeans(3)
kmeans.fit(data)

centroids = kmeans.cluster_centers_



pd.DataFrame(centroids,columns=features).T

centroids

